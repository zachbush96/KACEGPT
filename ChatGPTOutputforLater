Sure, we can create a similar extension, but with some best practices applied. Here are the files that we will need:

manifest.json: This is the metadata of the extension, which includes its name, version, permissions, scripts, and other necessary information.

background.js: This script is responsible for handling the communication between other parts of the extension, such as content and popup scripts. It also makes the API call and stores the response.

content.js: This script interacts with the webpages. It extracts the necessary text and sends it to the background script.

popup.html: This is the HTML file that defines the structure of the popup UI.

popup.js: This script handles the behavior of the popup UI. It retrieves the stored response and displays it in the popup.

options.html and options.js (optional): These files are used to create an options page for your extension where users can customize their settings. For example, the API token could be set here by the user, instead of hardcoding it in the script.

Here are the contents of the files:

manifest.json

json
Copy code
{
  "manifest_version": 2,
  "name": "GPT-3 API Extension",
  "version": "1.0",
  "description": "An extension that uses GPT-3 API",
  "permissions": ["storage", "activeTab", "<all_urls>", "tabs"],
  "background": {
    "scripts": ["background.js"],
    "persistent": false
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["content.js"]
    }
  ],
  "browser_action": {
    "default_popup": "popup.html"
  }
}
background.js

javascript
Copy code
// Listener for messages from the content script
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.text) {
    // Call GPT-3 API with the extracted text
    callGPTAPI(request.text)
      .then((response) => {
        // Save the API response
        saveResponse(response);
      })
      .catch((error) => {
        console.error("Error calling GPT-3 API:", error);
      });
  }
});

// Function to call the GPT-3 API
async function callGPTAPI(text) {
  // TODO: Retrieve API token securely
  const API_TOKEN = "your-api-token";
  const API_URL = "https://api.openai.com/v1/engines/davinci-codex/completions";
  const headers = new Headers({
    "Content-Type": "application/json",
    "Authorization": "Bearer " + API_TOKEN,
  });
  const body = JSON.stringify({
    "prompt": text,
    "max_tokens": 60
  });
  const response = await fetch(API_URL, {
    method: "POST",
    headers: headers,
    body: body,
  });
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  const jsonResponse = await response.json();
  return jsonResponse.choices[0].text;
}

// Function to save the API response
function saveResponse(response) {
  chrome.storage.local.set({ response: response }, () => {
    console.log("Response saved");
  });
}
content.js

javascript
Copy code
// Function to extract text from the specified class
function getTextFromElement() {
  const element = document.querySelector(".fr-view.wysiwyg");
  return element ? element.innerText : "";
}

// Send the extracted text to the background script
chrome.runtime.sendMessage**content.js (continued)**

```javascript
chrome.runtime.sendMessage({ text: getTextFromElement() });
popup.html

html
Copy code
<!DOCTYPE html>
<html>
  <body>
    <div id="response"></div>
    <script src="popup.js"></script>
  </body>
</html>
popup.js

javascript
Copy code
// Get the stored response and append it to the popup.html
chrome.storage.local.get(["response"], (result) => {
  let response = result.response;
  let responseElement = document.getElementById("response");
  responseElement.innerHTML = response;
});
options.html (optional)

html
Copy code
<!DOCTYPE html>
<html>
  <body>
    <label for="apiToken">API Token:</label>
    <input type="text" id="apiToken" name="apiToken">
    <button id="saveButton">Save</button>
    <script src="options.js"></script>
  </body>
</html>
options.js (optional)

javascript
Copy code
// Save API Token to local storage
document.getElementById('saveButton').onclick = function() {
  let apiToken = document.getElementById('apiToken').value;
  chrome.storage.local.set({ 'apiToken': apiToken });
};
Note: This code is just a starting point and may require further adjustments. For example, you will need to add error handling and possibly modify the selectors or API requests to suit your specific needs. Also, please note that the OpenAI API token is a sensitive value and should be stored securely, such as through the user input in the options page. The API token should not be hardcoded in the script.

You should replace "your-api-token" with the actual token, and you might also need to adjust the API endpoint and request payload according to the API's documentation and your requirements.

Remember to load your extension in developer mode in Chrome's extension page (chrome://extensions/) to test it out.





User
Please elaborate on the content.js file, and create it completely
ChatGPT
Sure, let's dive deeper into the content.js file.

This is a content script, which has direct access to the web page's DOM. It's used to read or modify the contents of a web page. In the context of your extension, it's responsible for extracting the text from a specific DOM element and sending it to the background script.

Here is a more robust version of content.js:

javascript
Copy code
// Function to extract text from the specified class
function getTextFromElement() {
  const element = document.querySelector(".fr-view.wysiwyg");
  if (element) {
    return element.innerText;
  } else {
    console.error("Element with class '.fr-view.wysiwyg' not found");
    return "";
  }
}

// Send the extracted text to the background script
function sendTextToBackgroundScript() {
  const text = getTextFromElement();
  if (text) {
    chrome.runtime.sendMessage({ text: text });
  } else {
    console.error("No text to send to background script");
  }
}

// Call the sendTextToBackgroundScript function when the page is fully loaded
window.addEventListener('load', (event) => {
  sendTextToBackgroundScript();
});

// Also call the sendTextToBackgroundScript function when the content of the page changes
// This is optional and depends on whether the text you are interested in can change without a full page reload
// You might need to adjust the selector to target a broader or narrower part of the page depending on your needs
const targetNode = document.querySelector('body'); // or other element that wraps the content of interest
const observerConfig = { attributes: true, childList: true, subtree: true };
const callback = function(mutationsList, observer) {
  for(let mutation of mutationsList) {
    if (mutation.type === 'childList') {
      sendTextToBackgroundScript();
      break; // if you found a relevant mutation, no need to check the rest
    }
  }
};
const observer = new MutationObserver(callback);
observer.observe(targetNode, observerConfig);
In this version of content.js, I've added:

More error logging: If the .fr-view.wysiwyg element is not found, or if there's no text to send to the background script, an error will be logged in the console.

Automatic sending of text when the page loads: The sendTextToBackgroundScript function will be called automatically when the page is fully loaded.

Automatic sending of text when the content of the page changes: A MutationObserver is used to watch for changes in the content of the page. If the content changes, sendTextToBackgroundScript is called again. This is useful if the text you're interested in can change without a full page reload, but you might need to adjust the selector used to target the node to observe.

This code still uses the .fr-view.wysiwyg class to find the element to extract text from. If the element you're interested in has a different class, or if you need to select it in a different way, you should adjust the document.querySelector argument accordingly.





User
So the content.js script can read / write straight to the open tab? Are you sure?
ChatGPT
Yes, content scripts in a Chrome extension have direct access to the web page's DOM and can read from or modify it. They can interact with web pages that the browser visits.

Content scripts are loaded in an "isolated world" inside the web page, so they can freely manipulate the DOM to read information from the page or make changes to it. However, they cannot directly access JavaScript variables or functions created by the page. They also cannot use Chrome APIs, except for a small subset of extension APIs, like chrome.runtime and chrome.i18n.

In the context of your extension, the content.js script is reading text from a specific element on the page (with the class .fr-view.wysiwyg) and sending that text to the background script.

It's important to note that while content scripts can modify the DOM of a page, they cannot apply changes that persist across page reloads. They also run after the page's own scripts, so they can't block anything the page does on load.

For more information, you can refer to the Chrome extension content scripts documentation.
